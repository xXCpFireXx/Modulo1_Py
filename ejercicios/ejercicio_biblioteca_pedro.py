# import time # Puedes descomentar si quieres usar time.sleep() para pausas

print("\n ----------------- SISTEMA DE GESTI√ìN DE LIBROS DE BIBLIOTECA -----------------\n")

# --- Configuraci√≥n ---
VALID_GENRES = ["Fiction", "NonFiction", "Science", "Biography", "Children"]
MIN_PUB_YEAR = 1800 # A√±o m√≠nimo de publicaci√≥n aceptado
MAX_PUB_YEAR = 2025 # A√±o m√°ximo de publicaci√≥n aceptado (para evitar a√±os futuros sin datetime)

# Diccionario principal para almacenar los libros
library = {}

# --- FUNCIONES AUXILIARES ---

# Funci√≥n para formatear la lista de g√©neros (Reutilizada)
def format_genre_list(genre_list):
    """Formatea una lista de g√©neros en una cadena separada por comas."""
    formatted_string = ""
    list_length = len(genre_list)

    for i in range(list_length):
        formatted_string += genre_list[i]

        if i < list_length - 1:
            formatted_string += ", "

    return formatted_string

# Funci√≥n para validar cadenas de texto no vac√≠as (Reutilizada)
def get_non_empty_string_input(prompt):
    """Solicita al usuario una cadena de texto no vac√≠a y la retorna limpia."""
    while True:
        user_input = input(prompt).strip()

        if user_input == "":
            print("\n---------------------------------")
            print("‚ö†Ô∏è Entrada vac√≠a. Por favor, ingrese un valor.")
            print("---------------------------------\n")
        else:
            return user_input

# Funci√≥n para validar n√∫meros enteros positivos (Reutilizada)
def get_positive_integer_input(prompt):
    """Solicita al usuario un n√∫mero entero positivo."""
    while True:
        user_input = input(prompt)

        try:
            number = int(user_input)

            if number > 0:
                return number
            else:
                print("\n---------------------------------")
                print("‚ö†Ô∏è Ingrese un n√∫mero entero positivo.")
                print("---------------------------------\n")
        except ValueError:
            print("\n---------------------------------")
            print("‚ö†Ô∏è Entrada inv√°lida. Ingrese un n√∫mero entero v√°lido.")
            print("---------------------------------\n")

# Funci√≥n para validar n√∫meros flotantes positivos (Reutilizada)
def get_positive_float_input(prompt):
    """Solicita al usuario un n√∫mero flotante positivo."""
    while True:
        user_input = input(prompt)

        try:
            number = float(user_input)

            if number >= 0:
                return number
            else:
                print("\n---------------------------------")
                print("‚ö†Ô∏è Ingrese un n√∫mero positivo o cero.")
                print("---------------------------------\n")
        except ValueError:
            print("\n---------------------------------")
            print("‚ö†Ô∏è Entrada inv√°lida. Ingrese un n√∫mero v√°lido.")
            print("---------------------------------\n")

# Funci√≥n para validar el a√±o de publicaci√≥n (Reutilizada)
def get_valid_year_input(prompt):
    """Solicita al usuario un a√±o de publicaci√≥n v√°lido."""
    while True:
        user_input = input(prompt)
        try:
            year = int(user_input)
            if MIN_PUB_YEAR <= year <= MAX_PUB_YEAR:
                return year
            else:
                print(f"\n---------------------------------")
                print(f"‚ö†Ô∏è A√±o inv√°lido. Ingrese un valor entre {MIN_PUB_YEAR} y {MAX_PUB_YEAR}.")
                print(f"---------------------------------\n")
        except ValueError:
            print("\n---------------------------------")
            print("‚ö†Ô∏è Entrada inv√°lida. Ingrese un n√∫mero entero para el a√±o.")
            print("---------------------------------\n")


# --- FUNCIONES PRINCIPALES DE GESTI√ìN (Nombres en ingl√©s) ---

# Funci√≥n para buscar libros (Adaptada de find_book, ahora busca por t√≠tulo O autor, retorna lista)
def find_books(search_term, search_type, library_data):
    """Busca libros por t√≠tulo o autor (insensible a may√∫sculas/min√∫sculas) y retorna una lista de libros que coinciden."""
    found_list = []
    cleaned_term = search_term.strip().lower()

    if search_type == "title":
        # Buscar por t√≠tulo (verificaci√≥n directa de clave, comparando en min√∫sculas)
        # Recorremos las claves en min√∫sculas para encontrar la clave original si existe
        original_title = None
        for title_key in library_data.keys(): # Usamos .keys()
            if title_key.strip().lower() == cleaned_term:
                original_title = title_key
                break # Encontramos la clave original

        if original_title: # Si encontramos una coincidencia (insensible a may√∫sculas)
            found_list.append((original_title, library_data[original_title])) # A√±adir tupla (t√≠tulo original, detalles)

    elif search_type == "author":
        # Buscar por autor (iterar sobre valores, comparando autor en min√∫sculas)
        for title, details in library_data.items(): # Usamos .items()
            if details["author"].strip().lower() == cleaned_term:
                 found_list.append((title, details)) # A√±adir tupla (t√≠tulo, detalles)

    return found_list # Retorna una lista de tuplas (t√≠tulo, detalles)


# 1. Registrar nuevos libros
def register_new_book(library_data):
    """Permite al usuario registrar un nuevo libro en el cat√°logo."""
    print("\n---------------------------------")
    print("üìö REGISTRAR NUEVO LIBRO")
    print("---------------------------------\n")

    title = get_non_empty_string_input("üëâ Ingrese el T√çTULO del libro:\n")

    # Verificar si el libro ya existe por t√≠tulo (insensible a may√∫sculas/min√∫sculas)
    existing_book_list = find_books(title, "title", library_data)

    if len(existing_book_list) > 0: # Usamos len()
        # Si find_books encontr√≥ algo por t√≠tulo, significa que ya existe (insensible a may√∫sculas)
        # existing_book_list[0][0] contiene el t√≠tulo original encontrado en el diccionario
        print(f"\n‚ö†Ô∏è El libro '{existing_book_list[0][0]}' ya existe en el cat√°logo.")
        print("Utilice la opci√≥n 'Actualizar informaci√≥n' para modificarlo.")
        # if 'time' in globals(): time.sleep(2)
        return

    # Si el libro no existe, obtenemos los dem√°s datos
    author = get_non_empty_string_input("üëâ Ingrese el AUTOR:\n")

    while True:
        genre_input = get_non_empty_string_input(f"üëâ Ingrese el G√âNERO ({format_genre_list(VALID_GENRES)}):\n")
        if genre_input in VALID_GENRES:
            genre = genre_input
            break
        else:
            print(f"\n---------------------------------")
            print(f"‚ö†Ô∏è G√©nero inv√°lido. Los g√©neros permitidos son: {format_genre_list(VALID_GENRES)}")
            print(f"---------------------------------\n")

    year = get_valid_year_input("üëâ Ingrese el A√ëO de publicaci√≥n:\n")
    quantity = get_positive_integer_input("üëâ Ingrese la CANTIDAD DISPONIBLE inicial:\n")
    price = get_positive_float_input("üëâ Ingrese el PRECIO de reposici√≥n:\n")

    # A√±adir el nuevo libro al diccionario (usando el t√≠tulo tal como se ingres√≥, pero limpio de espacios)
    library_data[title.strip()] = {
        "author": author,
        "genre": genre,
        "year": year,
        "quantity": quantity,
        "price": price
    }
    print(f"\n‚úÖ Libro '{title.strip()}' registrado correctamente.")
    # if 'time' in globals(): time.sleep(1)


# 2. Buscar libros en el cat√°logo
def search_book_in_catalog(library_data):
    """Permite al usuario buscar libros por t√≠tulo o autor y muestra los resultados."""
    print("\n---------------------------------")
    print("üîç BUSCAR LIBROS")
    print("---------------------------------\n")

    print("Buscar por:")
    print("1. T√≠tulo")
    print("2. Autor")
    search_option = get_non_empty_string_input("üëâ Seleccione el tipo de b√∫squeda (1 o 2):\n").strip()

    search_term = get_non_empty_string_input("üëâ Ingrese el t√©rmino de b√∫squeda:\n")

    found_books = []
    if search_option == "1":
        found_books = find_books(search_term, "title", library_data)
    elif search_option == "2":
        found_books = find_books(search_term, "author", library_data)
    else:
        print("\n‚ö†Ô∏è Opci√≥n de b√∫squeda inv√°lida. Intente de nuevo.")
        # if 'time' in globals(): time.sleep(2)
        return

    # Mostrar resultados
    if len(found_books) == 0: # Usamos len()
        print("Book not found.\n") # Mensaje en ingl√©s
        print("¬øDesea registrarlo? (Utilice la opci√≥n 1 del men√∫ principal)")
        # if 'time' in globals(): time.sleep(2)
    else:
        print("\n--- Resultados de la B√∫squeda ---")
        # Implementaci√≥n simple de Bubble Sort para ordenar los resultados por t√≠tulo (primer elemento de la tupla)
        n = len(found_books) # Usamos len()
        for i in range(n): # Usamos range()
            for j in range(0, n - i - 1): # Usamos range()
                 # found_books es una lista de tuplas (t√≠tulo, detalles)
                 # Comparar por el t√≠tulo (found_books[j][0])
                 if found_books[j][0] > found_books[j + 1][0]: # Acceso al t√≠tulo en la tupla
                     temp = found_books[j]
                     found_books[j] = found_books[j + 1]
                     found_books[j + 1] = temp # <-- CORRECCI√ìN: Eliminar el par√©ntesis extra aqu√≠
         # Fin de la implementaci√≥n Bubble Sort

        for title, details in found_books:
            print(f"T√≠tulo: {title}")
            print(f"Autor: {details['author']}")
            print(f"G√©nero: {details['genre']}")
            print(f"A√±o: {details['year']}")
            print(f"Cantidad Disponible: {details['quantity']}")
            print(f"Precio Reposici√≥n: ${details['price']:.2f}")
            print("---")
        print("---------------------------------\n")
        # if 'time' in globals(): time.sleep(5)


# 3. Actualizar informaci√≥n
def update_book_info(library_data):
    """Permite actualizar la cantidad o el precio de un libro existente."""
    print("\n---------------------------------")
    print("‚úèÔ∏è ACTUALIZAR INFORMACI√ìN DEL LIBRO")
    print("---------------------------------\n")

    # Solicitamos el t√≠tulo (insensible a may√∫sculas para encontrarlo)
    title_to_update = get_non_empty_string_input("üëâ Ingrese el T√çTULO del libro a actualizar:\n")

    # Buscar el libro por t√≠tulo (usando find_books)
    found_list = find_books(title_to_update, "title", library_data)

    if len(found_list) == 0: # Usamos len()
        print("Book not found.\n")
        # if 'time' in globals(): time.sleep(2)
        return

    # Si se encontr√≥ el libro (find_books por t√≠tulo deber√≠a devolver 0 o 1 resultado con esta l√≥gica)
    # found_list[0] es la tupla (t√≠tulo_original, detalles)
    original_title, book_details = found_list[0]

    print(f"\nLibro encontrado: '{original_title}'")
    print("¬øQu√© informaci√≥n desea actualizar?")
    print("1. Cantidad Disponible")
    print("2. Precio de Reposici√≥n")
    update_option = get_non_empty_string_input("üëâ Seleccione una opci√≥n (1 o 2):\n").strip()

    if update_option == "1":
        new_quantity = get_positive_integer_input(f"üëâ Ingrese la NUEVA Cantidad Disponible para '{original_title}':\n")
        book_details["quantity"] = new_quantity # Actualiza directamente en el diccionario original
        print(f"\n‚úÖ Cantidad disponible de '{original_title}' actualizada a {new_quantity}.")
        # if 'time' in globals(): time.sleep(2)
    elif update_option == "2":
        new_price = get_positive_float_input(f"üëâ Ingrese el NUEVO Precio de Reposici√≥n para '{original_title}':\n")
        book_details["price"] = new_price # Actualiza directamente
        print(f"\n‚úÖ Precio de reposici√≥n de '{original_title}' actualizado a ${new_price:.2f}.")
        # if 'time' in globals(): time.sleep(2)
    else:
        print("\n‚ö†Ô∏è Opci√≥n de actualizaci√≥n inv√°lida.")
        # if 'time' in globals(): time.sleep(2)


# 4. Eliminar libros obsoletos (Adaptada de delete_product)
def delete_obsolete_book(library_data):
    """Permite eliminar un libro del cat√°logo previa confirmaci√≥n."""
    print("\n---------------------------------")
    print("üóëÔ∏è ELIMINAR LIBRO")
    print("---------------------------------\n")

    # Solicitamos el t√≠tulo (insensible a may√∫sculas para encontrarlo)
    title_to_delete = get_non_empty_string_input("üëâ Ingrese el T√çTULO del libro a eliminar:\n")

    # Buscar el libro por t√≠tulo (usando find_books)
    found_list = find_books(title_to_delete, "title", library_data)

    if len(found_list) == 0: # Usamos len()
        print("Book not found.\n")
        # if 'time' in globals(): time.sleep(2)
        return

    # Si se encontr√≥ el libro
    original_title, book_details = found_list[0]

    # Solicitar confirmaci√≥n
    confirm = get_non_empty_string_input(f"üëâ ¬øEst√° seguro de eliminar el libro '{original_title}'? (s√≠/no):\n").strip().lower()

    if confirm == "s√≠" or confirm == "si":
        del library_data[original_title] # Elimina la entrada del diccionario
        print(f"\n‚úÖ Libro '{original_title}' eliminado del cat√°logo.")
        # if 'time' in globals(): time.sleep(2)
    else:
        print(f"\n‚ùå Eliminaci√≥n de '{original_title}' cancelada.")
        # if 'time' in globals(): time.sleep(2)


# 5. Generar reportes (Adaptada)
def generate_reports(library_data):
    """Genera y muestra diferentes reportes sobre el inventario."""
    print("\n---------------------------------")
    print("üìä GENERAR REPORTES")
    print("---------------------------------\n")

    print("Seleccione el reporte a generar:")
    print("1. Valor Total de Reposici√≥n del Inventario")
    print("2. Libro m√°s Antiguo y m√°s Reciente por G√©nero")
    report_option = get_non_empty_string_input("üëâ Ingrese una opci√≥n (1 o 2):\n").strip()

    if report_option == "1":
        # Reporte 1: Valor Total de Reposici√≥n
        total_replacement_value = 0.0
        # Iterar sobre los valores (detalles del libro)
        for book_details in library_data.values(): # Usamos .values()
             # Asegurarse de que quantity y price existan y sean num√©ricos (aunque get_..._input los valida)
             # Aqu√≠ confiamos en la estructura de datos que add_book crea.
             total_replacement_value += book_details["quantity"] * book_details["price"]

        print("\n--- Reporte: Valor Total de Reposici√≥n ---")
        print(f"Valor total de reposici√≥n del inventario: ${total_replacement_value:.2f}") # Formato a 2 decimales
        print("------------------------------------------\n")
        # if 'time' in globals(): time.sleep(3)

    elif report_option == "2":
        # Reporte 2: Libro m√°s Antiguo y m√°s Reciente por G√©nero
        print("\n--- Reporte: Libro m√°s Antiguo y m√°s Reciente por G√©nero ---")

        # 1. Agrupar libros por g√©nero y encontrar el m√°s antiguo y reciente en cada uno
        genre_year_info = {} # {"Genero": {"oldest": (title, year), "newest": (title, year)}}

        # Iterar sobre los items del diccionario principal
        if len(library_data) == 0: # Usamos len()
            print("No hay libros registrados para generar este reporte.")
            # if 'time' in globals(): time.sleep(2)
            return # Salir si no hay libros

        for title, details in library_data.items(): # Usamos .items()
             genre = details.get("genre", "Desconocido") # Usamos .get() para seguridad si el g√©nero falta
             year = details.get("year", MAX_PUB_YEAR + 1) # Usamos .get() y un a√±o "futuro" si falta para no ser el m√°s antiguo/reciente

             if genre not in genre_year_info:
                 # Si es el primer libro de este g√©nero, inicializar
                 genre_year_info[genre] = {
                     "oldest": (title, year), # Guardar como tupla (t√≠tulo, a√±o)
                     "newest": (title, year)
                 }
             else:
                 # Comparar con el libro m√°s antiguo/reciente registrado para este g√©nero
                 current_oldest_year = genre_year_info[genre]["oldest"][1] # Obtener el a√±o del m√°s antiguo
                 current_newest_year = genre_year_info[genre]["newest"][1] # Obtener el a√±o del m√°s reciente

                 if year < current_oldest_year:
                     genre_year_info[genre]["oldest"] = (title, year) # Actualizar el m√°s antiguo
                 if year > current_newest_year:
                      genre_year_info[genre]["newest"] = (title, year) # Actualizar el m√°s reciente

        # 2. Mostrar los resultados por g√©nero
        if len(genre_year_info) == 0: # Usamos len()
            # Este caso no deber√≠a ocurrir si library_data no estaba vac√≠o, pero es una buena pr√°ctica.
            print("No hay informaci√≥n de g√©nero disponible.")
        else:
            # Iterar sobre los g√©neros encontrados
            for genre, year_info in genre_year_info.items(): # Usamos .items()
                 oldest_book = year_info["oldest"] # Tupla (t√≠tulo, a√±o)
                 newest_book = year_info["newest"] # Tupla (t√≠tulo, a√±o)

                 print(f"\nG√©nero: {genre}")
                 print(f"  M√°s antiguo: '{oldest_book[0]}' ({oldest_book[1]})")
                 print(f"  M√°s reciente: '{newest_book[0]}' ({newest_book[1]})")

        print("----------------------------------------------------------\n")
        # if 'time' in globals(): time.sleep(5)

    else:
        print("\n‚ö†Ô∏è Opci√≥n de reporte inv√°lida. Intente de nuevo.")
        # if 'time' in globals(): time.sleep(2)


# --- INICIALIZACI√ìN DE DATOS (Precargar 5 libros) ---
# Usamos la funci√≥n register_new_book para a√±adir los libros iniciales de forma limpia
# Esto garantiza que pasen por las validaciones y se a√±adan correctamente
def preload_initial_books(library_data):
     """Precarga 5 libros ejemplo en la biblioteca."""
     print("Precargando libros iniciales...")
     # Llamamos directamente la l√≥gica de register_new_book con datos fijos
     # No es ideal, pero simula el proceso sin entrada de usuario en el inicio.
     # Una forma m√°s limpia ser√≠a tener una funci√≥n interna add_book_data(details)
     # y que register_new_book la llame despu√©s de validar inputs.
     # Para este ejemplo, simulemos la adici√≥n directa para 5 libros.

     books_to_preload = [
         {"title": "Cien a√±os de soledad", "author": "Gabriel Garc√≠a M√°rquez", "genre": "Fiction", "year": 1967, "quantity": 5, "price": 25.50},
         {"title": "1984", "author": "George Orwell", "genre": "Fiction", "year": 1949, "quantity": 3, "price": 18.00},
         {"title": "Cosmos", "author": "Carl Sagan", "genre": "Science", "year": 1980, "quantity": 4, "price": 30.75},
         {"title": "La sombra del viento", "author": "Carlos Ruiz Zaf√≥n", "genre": "Fiction", "year": 2001, "quantity": 2, "price": 22.00},
         {"title": "Ensayo sobre la ceguera", "author": "Jos√© Saramago", "genre": "Fiction", "year": 1995, "quantity": 3, "price": 20.00},
         # Puedes a√±adir m√°s aqu√≠ si quieres probar con m√°s datos
     ]

     for book_data in books_to_preload:
         # Asegurarse de que el t√≠tulo no est√© vac√≠o antes de a√±adir
         if book_data["title"].strip() != "":
              # A√±adir directamente al diccionario, simulando la salida validada de get_..._input
              # Esto omite la verificaci√≥n de duplicados al inicio, pero es solo para precarga.
              library_data[book_data["title"].strip()] = {
                  "author": book_data["author"].strip(),
                  "genre": book_data["genre"], # Asumimos g√©nero v√°lido en precarga
                  "year": book_data["year"], # Asumimos a√±o v√°lido
                  "quantity": book_data["quantity"], # Asumimos cantidad v√°lida
                  "price": book_data["price"] # Asumimos precio v√°lido
              }
     print(f"Se precargaron {len(books_to_preload)} libros.") # Usamos len()
     # if 'time' in globals(): time.sleep(1)


# --- FUNCI√ìN PRINCIPAL (Men√∫ Interactivo) ---
def main():
    # Precargar los libros iniciales antes de iniciar el men√∫
    preload_initial_books(library)

    while True:
        print("\n------------ MEN√ö PRINCIPAL DE GESTI√ìN DE LIBROS ------------\n")
        print("1. üìö Registrar Nuevo Libro")
        print("2. üîç Buscar Libro en Cat√°logo")
        print("3. ‚úèÔ∏è Actualizar Informaci√≥n de Libro")
        print("4. üóëÔ∏è Eliminar Libro Obsoleto")
        print("5. üìä Generar Reportes")
        print("6. üëã SALIR\n")

        user_option = input("üëâ Ingrese una OPCI√ìN (1-6): \n").strip()

        if user_option == "1":
            register_new_book(library)
        elif user_option == "2":
            search_book_in_catalog(library)
        elif user_option == "3":
            update_book_info(library)
        elif user_option == "4":
            delete_obsolete_book(library)
        elif user_option == "5":
            generate_reports(library)
        elif user_option == "6":
            print("\nüö™ Saliendo del Sistema de Gesti√≥n de Libros. ¬°Adi√≥s!\n")
            break
        else:
            print("\n‚ö†Ô∏è Error: Ingrese una opci√≥n v√°lida del 1 al 6.\n")

# Llamar a la funci√≥n principal al ejecutar el script
if __name__ == "__main__":
    main()